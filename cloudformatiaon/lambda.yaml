
Resources:

  BasicLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - Action: execute-api:ManageConnections
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:execute-api:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - ":"
                  - "*/*/POST/@connections/*"
          - Action: execute-api:ManageConnections
            Effect: Allow
            Resource:
              Fn::Join:
                - ""
                - - "arn:aws:execute-api:"
                  - Ref: AWS::Region
                  - ":"
                  - Ref: AWS::AccountId
                  - ":"
                  - "*/*/GET/@connections/*"
        Version: "2012-10-17"
      PolicyName: LambdaTest1
      Roles:
        - Ref: BasicLambdaRole

  BasicLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com

      Description: Basic lambda role
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  LambdaTest:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: LambdaTest
      Architectures: [x86_64]
      Code:
        ZipFile: |-
          import json, math
          def lambda_handler(event, context):
            n = int(event.get("n", 5)) if isinstance(event, dict) else 5
            result = math.factorial(n)
            body = {"n": n, "factorial": result}
            return {
            "statusCode": 200,
            "headers": {"Content-Type": "application/json"},
            "body": json.dumps(body)
            }
      Role:
        Fn::GetAtt:
          - BasicLambdaRole
          - Arn

      Handler: index.lambda_handler
      Runtime: python3.11

  LambdaHttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: LambdaHttpApi
      ProtocolType: HTTP


  LambdaTestUrl:
    Type: AWS::Lambda::Url
    Properties:
      AuthType: NONE
      #Qualifier: String
      TargetFunctionArn: !GetAtt LambdaTest.Arn
    DependsOn:
      - LambdaTest

  HTTPApiEndpointTest:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: HTTPApiEndpointTest
      ProtocolType: HTTP

  LambdaHttpApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HTTPApiEndpointTest
      IntegrationType: AWS_PROXY

      IntegrationUri: 
        Fn::Sub: arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LambdaTest}
      IntegrationMethod: POST
      PayloadFormatVersion: "2.0"

  LambdaHttpApiRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HTTPApiEndpointTest
      RouteKey: "POST /"  
      Target: !Join 
        - "/"
        - - "integrations"
          - !Ref LambdaHttpApiIntegration

  LambdaHttpApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HTTPApiEndpointTest
      StageName: "$default"
      AutoDeploy: true

  LambdaApiInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaTest
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${LambdaHttpApi}/*/*/

