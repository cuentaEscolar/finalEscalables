
Parameters:
  
  S3Url:
    Description: Link with Repo
    Type: String

Resources:

  
  SecretsStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${S3Url}/cloudformation/secrets.yaml"

  NetworkStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${S3Url}/cloudformation/network.yaml"
      Parameters:
        S3Url: !Ref S3Url


  SecurityGroups:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${S3Url}/cloudformation/security_groups.yaml"

      Parameters:
        MainVPC: 
          Fn::GetAtt: [NetworkStack, Outputs.MainVPC]


  Ec2Template:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${S3Url}/cloudformation/ec2_template.yaml"

      Parameters:
        MainVPC: 
          Fn::GetAtt: [NetworkStack, Outputs.MainVPC]
        ImportedKeyPair: 
          Fn::GetAtt: [SecretsStack, Outputs.ImportedKeyPair]
        InstanceProfileArn:
          arn:aws:iam::013001369500:instance-profile/ec2testrole

        PrivateInstanceSecurityGroup:
          Fn::GetAtt: [SecurityGroups, Outputs.PrivateInstanceSecurityGroup]

        WebServerSecurityGroup:
          Fn::GetAtt: [SecurityGroups, Outputs.WebServerSecurityGroup]

    DependsOn: 
      - NetworkStack
      - SecurityGroups
#
  #BastionHostStack:
    #Type: AWS::CloudFormation::Stack
    #Properties:
      #TemplateURL: !Sub "${S3Url}/cloudformation/bastion_host.yaml"
      #Parameters:
        #BastionInstanceType:
          #t3.micro
        #MainVPC:
          #Fn::GetAtt: [NetworkStack, Outputs.MainVPC]
#
        #ImportedKeyPair:
          #!Ref ImportedKeyPair
      # Fn::GetAtt: [SecretsStack, Outputs.ImportedKeyPair]
#
        #BastionSecurityGroup:
          #Type: String
          #Fn::GetAtt: [SecurityGroups, Outputs.BastionSecurityGroup]
#
        #FirstPublicSubnet:
#
          #!GetAtt NetworkStack.Outputs.FirstPublicSubnet

  RDSstack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${S3Url}/cloudformation/rds_template.yaml"
      Parameters:
        DBSecret:
          Fn::GetAtt: [SecretsStack, Outputs.DBSecret]

        MyDatabaseSecurityGroup:
          Fn::GetAtt: [SecurityGroups, Outputs.MyDatabaseSecurityGroup]

        SecondPrivateSubnetA:
          Fn::GetAtt: [NetworkStack, Outputs.SecondPrivateSubnetA]
        SecondPrivateSubnetB:
          Fn::GetAtt: [NetworkStack, Outputs.SecondPrivateSubnetB]

  AutoScalingGroup:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${S3Url}/cloudformation/auto_scaling_group.yaml"
      Parameters:
        MainVPC: 
          Fn::GetAtt: [NetworkStack, Outputs.MainVPC]
        LaunchTemplateEc2Micro:
          Fn::GetAtt: [Ec2Template, Outputs.LaunchTemplateEc2Micro]

        TargetSubnetA:
          Fn::GetAtt: [NetworkStack, Outputs.FirstPublicSubnetA] 
        TargetSubnetB:
          Fn::GetAtt: [NetworkStack, Outputs.FirstPublicSubnetB] 

  LoadBalancerAZ1:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${S3Url}/cloudformation/load_balancer.yaml"

      Parameters:
        MainVPC: 
          Fn::GetAtt: [NetworkStack, Outputs.MainVPC]
        FirstPublicSubnet:
          Fn::GetAtt: [NetworkStack, Outputs.FirstPublicSubnetA]
        FirstPrivateSubnet:
          Fn::GetAtt: [NetworkStack, Outputs.FirstPrivateSubnetA]
        SecondPrivateSubnet:
          Fn::GetAtt: [NetworkStack, Outputs.SecondPrivateSubnetA]
        ALBSecurityGroup:
          Fn::GetAtt: [SecurityGroups, Outputs.ALBSecurityGroup]
        IncomingTargetGroup:
          Fn::GetAtt: [AutoScalingGroup, Outputs.IncomingTargetGroup]
        WebServerASG:
          Fn::GetAtt: [AutoScalingGroup, Outputs.WebServerASG]
          


    DependsOn: 
      - NetworkStack
      - SecurityGroups
      - AutoScalingGroup

Outputs:
  ImportedKeyPair:
    Value: 
      Fn::GetAtt: [SecretsStack, Outputs.ImportedKeyPair]

