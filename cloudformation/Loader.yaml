
Parameters:
  
  S3Url:
    Description: Link with Repo
    Type: String
  PublicKey:
    Description: Secret PublicKey
    Type: String

Resources:

  
  SecretsStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${S3Url}/cloudformation/secrets.yaml"
      Parameters:
        PublicKey: !Ref PublicKey

  NetworkStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${S3Url}/cloudformation/network.yaml"
      Parameters:
        S3Url: !Ref S3Url


  SecurityGroups:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${S3Url}/cloudformation/security_groups.yaml"

      Parameters:
        MainVPC: 
          Fn::GetAtt: [NetworkStack, Outputs.MainVPC]


  Ec2Template:
    Type: AWS::CloudFormation::Stack
    Properties:
      Capabilities:
        - CAPABILITY_IAM
      TemplateURL: !Sub "${S3Url}/cloudformation/ec2_template.yaml"

      Parameters:
        MainVPC: 
          Fn::GetAtt: [NetworkStack, Outputs.MainVPC]
        ImportedKeyPair: 
          Fn::GetAtt: [SecretsStack, Outputs.ImportedKeyPair]

        PrivateInstanceSecurityGroup:
          Fn::GetAtt: [SecurityGroups, Outputs.PrivateInstanceSecurityGroup]

        WebServerSecurityGroup:
          Fn::GetAtt: [SecurityGroups, Outputs.WebServerSecurityGroup]

        DBUsernameParameter:
          Fn::GetAtt: [SecretsStack, Outputs.DBUsernameParameter]
        DBPasswordParameter:
          Fn::GetAtt: [SecretsStack, Outputs.DBPasswordParameter]
        DatabaseEndpoint:
          Fn::GetAtt: [RDSstack, Outputs.DatabaseEndpoint]

    DependsOn: 
      - NetworkStack
      - SecurityGroups
#
  BastionHostStackAZ1:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${S3Url}/cloudformation/bastion_host.yaml"
      Parameters:
        BastionInstanceType:
          t3.micro
        MainVPC:
          Fn::GetAtt: [NetworkStack, Outputs.MainVPC]

        ImportedKeyPair:
          Fn::GetAtt: [SecretsStack, Outputs.ImportedKeyPair]

        BastionSecurityGroup:
          Fn::GetAtt: [SecurityGroups, Outputs.BastionSecurityGroup]

        FirstPublicSubnet:
          Fn::GetAtt: [NetworkStack, Outputs.FirstPublicSubnetA]

  RDSstack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${S3Url}/cloudformation/rds_template.yaml"
      Parameters:
        DBSecret:
          Fn::GetAtt: [SecretsStack, Outputs.DBSecret]

        MyDatabaseSecurityGroup:
          Fn::GetAtt: [SecurityGroups, Outputs.MyDatabaseSecurityGroup]

        SecondPrivateSubnetA:
          Fn::GetAtt: [NetworkStack, Outputs.SecondPrivateSubnetA]
        SecondPrivateSubnetB:
          Fn::GetAtt: [NetworkStack, Outputs.SecondPrivateSubnetB]

  AutoScalingGroup:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${S3Url}/cloudformation/auto_scaling_group.yaml"
      Parameters:
        MainVPC: 
          Fn::GetAtt: [NetworkStack, Outputs.MainVPC]
        LaunchTemplateEc2Micro:
          Fn::GetAtt: [Ec2Template, Outputs.LaunchTemplateEc2Micro]
        LatestTemplateVersion:
          Fn::GetAtt: [Ec2Template, Outputs.LatestTemplateVersion]

        TargetSubnetA:
          Fn::GetAtt: [NetworkStack, Outputs.FirstPublicSubnetA] 
        TargetSubnetB:
          Fn::GetAtt: [NetworkStack, Outputs.FirstPublicSubnetB] 

  LoadBalancerAZ1:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "${S3Url}/cloudformation/load_balancer.yaml"
  
      Parameters:
        MainVPC: 
          Fn::GetAtt: [NetworkStack, Outputs.MainVPC]
        FirstPublicSubnet:
          Fn::GetAtt: [NetworkStack, Outputs.FirstPublicSubnetA]
        SecondPublicSubnet:
          Fn::GetAtt: [NetworkStack, Outputs.FirstPublicSubnetB]
        FirstPrivateSubnet:
          Fn::GetAtt: [NetworkStack, Outputs.FirstPrivateSubnetA]
        SecondPrivateSubnet:
          Fn::GetAtt: [NetworkStack, Outputs.SecondPrivateSubnetA]
        ALBSecurityGroup:
          Fn::GetAtt: [SecurityGroups, Outputs.ALBSecurityGroup]
        IncomingTargetGroup:
          Fn::GetAtt: [AutoScalingGroup, Outputs.IncomingTargetGroup]
        WebServerASG:
          Fn::GetAtt: [AutoScalingGroup, Outputs.WebServerASG]
        IncomingTargetGroupFullName:
          Fn::GetAtt: [AutoScalingGroup, Outputs.IncomingTargetGroupFullName]
          
    DependsOn: 
      - NetworkStack
      - SecurityGroups
      - AutoScalingGroup

Outputs:
  ImportedKeyPair:
    Value: 
      Fn::GetAtt: [SecretsStack, Outputs.ImportedKeyPair]

  LoadBalancerAZ1:
    Value: !Ref LoadBalancerAZ1
  WebServerASG:
    Value:
      Fn::GetAtt: [AutoScalingGroup, Outputs.WebServerASG]
    Description: 
      We need it Again


